#!/bin/bash
#
#
#

[ -n "$DEBUG" ] && set -v

set -eu

source $WELDER_ROOT/libexec/priv/_helpers

__load_config "$@" || __fail "Usage: welder compile <playbook>"

__ensure_rsync

tmp_dir=$(mktemp -d)
trap 'rm -rf "$tmp_dir"' EXIT

# rsyncs only the modules that include files/ directories
# skips setup.sh scripts and creates list of files to be compiled
# and uploaded to the server
function __rsync_modules() {
  rsync -a --prune-empty-dirs --include="*/" --include="modules/*/files/**" --exclude='*' --quiet ./modules $tmp_dir
}

# Copy all "files" directories to ./tmp so they can be parsed
if [ -z "${cfg_shared_path-}" ]; then
  echo # do nothing
else
  pushd "$WELDER_ROOT/$cfg_shared_path" >/dev/null
  __rsync_modules
  popd >/dev/null
fi

pushd "$WELDER_ROOT" >/dev/null
__rsync_modules
popd >/dev/null

# Compile templates (if there's any *.liquid files)
if test -n "$(find $tmp_dir -name '*.liquid' -print -quit)"
then
  __info "compiling *.liquid templates"
  $WELDER_ROOT/libexec/priv/compile-templates $tmp_dir
  __success "compiled templates"
fi

# Compile yaml config files into shell-compatible variables
[ -f $tmp_dir/config-variables ] && rm $tmp_dir/config-variables

if [ -f "./config.yml" ]
then
  $WELDER_ROOT/libexec/priv/parse-config "./config.yml" > $tmp_dir/config-variables
fi

if [ -f "./vault.yml" ]
then
  $WELDER_ROOT/libexec/priv/parse-config "./vault.yml" >> $tmp_dir/config-variables
fi

__info "uploading template files to the server"

# rsync compiled files to the server, skipping source (liquid) templates
rsync -a -e "ssh -p $cfg_ssh_port" --delete --exclude="*.liquid" --quiet $tmp_dir/ $cfg_ssh_url:setup

__success "uploading template files to the server"
